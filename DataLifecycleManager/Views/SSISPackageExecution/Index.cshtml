@model DataLifecycleManager.Presentation.ViewModels.SSISPackageExecution.ExecutionListPageViewModel

@{
    ViewData["Title"] = "SSIS Package Executions";
}

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2><i class="fas fa-history me-2 text-primary"></i>SSIS Package Executions</h2>
        <a asp-controller="SSISPackage" asp-action="Index" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left me-2"></i>Back to Packages
        </a>
    </div>

    @if (!Model.Executions.Any())
    {
        <div class="alert alert-info">
            <i class="fas fa-info-circle me-2"></i>No executions found. Execute an SSIS package to see the history here.
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover table-striped mb-0" id="executionsTable">
                        <thead class="table-light">
                            <tr>
                                <th>Execution ID</th>
                                <th>Package Name</th>
                                <th>Folder/Project</th>
                                <th>Status</th>
                                <th>Start Time</th>
                                <th>Duration</th>
                                <th>Executed By</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var execution in Model.Executions)
                            {
                                var statusBadgeClass = execution.Status switch
                                {
                                    "Succeeded" => "bg-success",
                                    "Failed" => "bg-danger",
                                    "Running" => "bg-primary",
                                    "Pending" => "bg-warning text-dark",
                                    "Cancelled" => "bg-secondary",
                                    "Timeout" => "bg-warning text-dark",
                                    _ => "bg-secondary"
                                };

                                var statusIcon = execution.Status switch
                                {
                                    "Succeeded" => "fa-check-circle",
                                    "Failed" => "fa-times-circle",
                                    "Running" => "fa-spinner fa-spin",
                                    "Pending" => "fa-clock",
                                    "Cancelled" => "fa-ban",
                                    "Timeout" => "fa-hourglass-end",
                                    _ => "fa-question-circle"
                                };

                                <tr>
                                    <td>
                                        <strong>#@execution.Id</strong>
                                        @if (execution.CatalogExecutionId.HasValue)
                                        {
                                            <br />
                                            <small class="text-muted">Catalog: @execution.CatalogExecutionId</small>
                                        }
                                    </td>
                                    <td>
                                        <strong>@execution.PackageName</strong>
                                    </td>
                                    <td>
                                        <span class="badge bg-info">@execution.FolderName</span>
                                        /
                                        <span class="badge bg-secondary">@execution.ProjectName</span>
                                    </td>
                                    <td>
                                        <span class="badge @statusBadgeClass">
                                            <i class="fas @statusIcon me-1"></i>@execution.Status
                                        </span>
                                    </td>
                                    <td>
                                        @if (execution.StartTime.HasValue)
                                        {
                                            @execution.StartTime.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")
                                        }
                                        else
                                        {
                                            <span class="text-muted">Not started</span>
                                        }
                                    </td>
                                    <td>
                                        @if (execution.DurationSeconds.HasValue)
                                        {
                                            var duration = TimeSpan.FromSeconds(execution.DurationSeconds.Value);
                                            if (duration.TotalHours >= 1)
                                            {
                                                @duration.ToString(@"hh\:mm\:ss")
                                            }
                                            else
                                            {
                                                @duration.ToString(@"mm\:ss")
                                            }
                                            <small class="text-muted">(@execution.DurationSeconds s)</small>
                                        }
                                        else if (execution.Status == "Running")
                                        {
                                            <span class="text-primary">
                                                <i class="fas fa-spinner fa-spin me-1"></i>In Progress
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrWhiteSpace(execution.ExecutedBy))
                                        {
                                            <i class="fas fa-user me-1 text-muted"></i>
                                            @execution.ExecutedBy
                                        }
                                        else
                                        {
                                            <span class="text-muted">Unknown</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group">
                                            <a asp-action="Details" asp-route-id="@execution.Id" class="btn btn-outline-primary"
                                                title="View Details">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Pagination Controls -->
        @if (Model.TotalPages > 1)
        {
            <div class="card mt-3">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <div class="d-flex align-items-center">
                                <label class="me-2 mb-0">Page Size:</label>
                                <select class="form-select form-select-sm" style="width: auto;" id="pageSizeSelect">
                                    <option value="10" selected="@(Model.PageSize == 10)">10</option>
                                    <option value="25" selected="@(Model.PageSize == 25)">25</option>
                                    <option value="50" selected="@(Model.PageSize == 50)">50</option>
                                    <option value="100" selected="@(Model.PageSize == 100)">100</option>
                                </select>
                                <span class="ms-3 text-muted">
                                    Showing @((Model.CurrentPage - 1) * Model.PageSize + 1)
                                    to @(Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalCount))
                                    of @Model.TotalCount executions
                                </span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <nav aria-label="Execution pagination">
                                <ul class="pagination pagination-sm justify-content-end mb-0">
                                    <!-- Previous Button -->
                                    <li class="page-item @(!Model.HasPreviousPage ? "disabled" : "")">
                                        <a class="page-link" asp-action="Index" asp-route-page="@(Model.CurrentPage - 1)"
                                            asp-route-pageSize="@Model.PageSize">
                                            <i class="fas fa-chevron-left"></i> Previous
                                        </a>
                                    </li>

                                    @{
                                        var startPage = Math.Max(1, Model.CurrentPage - 2);
                                        var endPage = Math.Min(Model.TotalPages, Model.CurrentPage + 2);

                                        if (startPage > 1)
                                        {
                                            <li class="page-item">
                                                <a class="page-link" asp-action="Index" asp-route-page="1"
                                                    asp-route-pageSize="@Model.PageSize">1</a>
                                            </li>
                                            if (startPage > 2)
                                            {
                                                <li class="page-item disabled"><span class="page-link">...</span></li>
                                            }
                                        }

                                        for (var i = startPage; i <= endPage; i++)
                                        {
                                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                                <a class="page-link" asp-action="Index" asp-route-page="@i"
                                                    asp-route-pageSize="@Model.PageSize">@i</a>
                                            </li>
                                        }

                                        if (endPage < Model.TotalPages)
                                        {
                                            if (endPage < Model.TotalPages - 1)
                                            {
                                                <li class="page-item disabled"><span class="page-link">...</span></li>
                                            }
                                            <li class="page-item">
                                                <a class="page-link" asp-action="Index" asp-route-page="@Model.TotalPages"
                                                    asp-route-pageSize="@Model.PageSize">@Model.TotalPages</a>
                                            </li>
                                        }
                                    }

                                    <!-- Next Button -->
                                    <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
                                        <a class="page-link" asp-action="Index" asp-route-page="@(Model.CurrentPage + 1)"
                                            asp-route-pageSize="@Model.PageSize">
                                            Next <i class="fas fa-chevron-right"></i>
                                        </a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="mt-3 text-muted">
                <small>
                    <i class="fas fa-info-circle me-1"></i>
                    Showing @Model.TotalCount execution(s). Click on "View Details" to see full execution information and logs.
                </small>
            </div>
        }
    }
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Handle page size change
            $('#pageSizeSelect').change(function () {
                var pageSize = $(this).val();
                var currentUrl = new URL(window.location.href);
                currentUrl.searchParams.set('pageSize', pageSize);
                currentUrl.searchParams.set('page', '1');
                window.location.href = currentUrl.toString();
            });
        });
    </script>
}